# This CMake script is designed for CLion IDE and QTCreator projects on Windows
# It should find bundled binary dependencies automatically when using MinGW compiler
# On Linux and Mac the dependencies (glm, glew, glfw) need to be installed manually

cmake_minimum_required(VERSION 3.1)
project(ppgso CXX)

#
# CONFIGURATION
#

# Basic CMake settings
set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/_install)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/data)

# Use add_resources function to convert .glsl to a .cpp files which will be compiled into a separate static library
include(add_resources)

#
# DEPENDENCIES
#

# Set up external dependencies for Windows users
if (MINGW)
  set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "${CMAKE_SOURCE_DIR}/dependencies/include/")
  set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "${CMAKE_SOURCE_DIR}/dependencies/lib/mingw")
elseif (MSVC)
  set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "${CMAKE_SOURCE_DIR}/dependencies/include/")
  if(MSVC_VERSION == 1500)
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "${CMAKE_SOURCE_DIR}/dependencies/lib/vc2015")
  elseif(MSVC_VERSION >= 1900)
    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "${CMAKE_SOURCE_DIR}/dependencies/lib/vc2019")
  endif()
  set(USE_STRICT_COMPILE_WARNINGS OFF CACHE BOOL "" FORCE)
endif ()

# Warnings for Debug mode
option(USE_STRICT_COMPILE_WARNINGS "Use strict compilation warnings in debug mode." ON)
# These compile flags should apply for GCC and Clang compilers
set(STRICT_COMPILE_FLAGS "-Wpedantic -Wall -Wno-c++98-compat -Wextra -Wno-sign-conversion -Wno-unused-parameter")
if (USE_STRICT_COMPILE_WARNINGS)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${STRICT_COMPILE_FLAGS}")
endif ()

# Find required packages
find_package(GLFW3 REQUIRED)
find_package(GLEW REQUIRED)
find_package(GLM REQUIRED)
find_package(OpenGL REQUIRED)

# Optional packages
find_package(OpenMP)
if(OPENMP_FOUND)
  list(APPEND CMAKE_CXX_FLAGS ${OpenMP_CXX_FLAGS})
endif()

# Set default installation destination
if (NOT CMAKE_INSTALL_PREFIX)
  set(CMAKE_INSTALL_PREFIX "../_install")
endif ()

#
# Shaders / Materials
#

set(PPGSO_SHADER_SRC
        shader/color_vert.glsl shader/color_frag.glsl
        shader/convolution_vert.glsl shader/convolution_frag.glsl
        shader/diffuse_vert.glsl shader/diffuse_frag.glsl
        shader/texture_vert.glsl shader/texture_frag.glsl
)
add_resources(shaders ${PPGSO_SHADER_SRC})

# PPGSO library
add_library(ppgso STATIC
        ppgso/mesh.cpp
        ppgso/tiny_obj_loader.cpp
        ppgso/shader.cpp
        ppgso/image.cpp
        ppgso/image_bmp.cpp
        ppgso/image_raw.cpp
        ppgso/texture.cpp
        ppgso/window.cpp
        src/playground/window.cpp
        src/playground/scene.cpp
        src/playground/renderable.h
        src/playground/camera.h
        src/playground/objects/background.cpp
        src/playground/objects/corn.cpp
        src/playground/objects/crow.cpp
        src/playground/objects/deer.cpp
        src/playground/objects/Deer_child.cpp
        src/playground/objects/falling_tree.cpp
        src/playground/shapes/cube.cpp
        src/playground/shapes/sphere.cpp
        src/playground/objects/fireflies.cpp
        src/playground/objects/flower.cpp
        src/playground/objects/ground.cpp
        src/playground/objects/lake.cpp
        src/playground/objects/moon.cpp
        src/playground/objects/player.cpp
        src/playground/objects/tree.cpp
        src/playground/objects/wolf.cpp
        src/playground/MeshWindow.cpp
        src/playground/MeshWindow.h
        src/playground/object/RenderableObject.h
        src/playground/object/Cube.cpp
        src/playground/object/RenderableObject.cpp
        src/playground/object/Cube.h
        src/playground/object/Ground.cpp
        src/playground/object/Ground.h
        src/playground/object/Door.cpp
        src/playground/object/Door.h)

# Make sure GLM uses radians and GLEW is a static library
target_compile_definitions(ppgso PUBLIC -DGLM_FORCE_RADIANS -DGLEW_STATIC)

# Link to GLFW, GLEW and OpenGL
target_link_libraries(ppgso PUBLIC ${GLFW_LIBRARIES} ${GLEW_LIBRARIES} ${OPENGL_LIBRARIES})
# Pass on include directories
target_include_directories(ppgso PUBLIC
        ppgso
        ${GLFW_INCLUDE_DIRS}
        ${GLEW_INCLUDE_DIRS}
        ${GLM_INCLUDE_DIRS}
        ${OPENGL_INCLUDE_DIRS}
        ${CMAKE_SOURCE_DIR}
        ${CMAKE_CURRENT_BINARY_DIR})

#
# TARGETS
#
# Playground target
add_executable(playground src/playground/playground.cpp
        src/playground/window.cpp
        src/playground/scene.cpp
        src/playground/renderable.h
        src/playground/camera.h
        src/playground/objects/background.cpp
        src/playground/objects/corn.cpp
        src/playground/objects/crow.cpp
        src/playground/objects/deer.cpp
        src/playground/objects/Deer_child.cpp
        src/playground/objects/falling_tree.cpp
        src/playground/shapes/cube.cpp
        src/playground/shapes/sphere.cpp
        src/playground/objects/fireflies.cpp
        src/playground/objects/flower.cpp
        src/playground/objects/ground.cpp
        src/playground/objects/lake.cpp
        src/playground/objects/moon.cpp
        src/playground/objects/player.cpp
        src/playground/objects/tree.cpp
        src/playground/objects/wolf.cpp
        src/playground/MeshWindow.cpp
        src/playground/MeshWindow.h
        src/playground/object/RenderableObject.h
        src/playground/object/Cube.cpp
        src/playground/object/RenderableObject.cpp
        src/playground/object/Cube.h
        src/playground/object/Ground.cpp
        src/playground/object/Ground.h
        src/playground/object/Door.cpp
        src/playground/object/Door.h)
target_link_libraries(playground ppgso shaders)
install (TARGETS playground DESTINATION .)
add_custom_command(TARGET playground POST_BUILD COMMAND  ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/data/ ${CMAKE_CURRENT_BINARY_DIR})
#
# INSTALLATION
#

file(COPY "data/" DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
install(DIRECTORY data/ DESTINATION .)
